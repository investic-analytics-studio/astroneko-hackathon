// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/firebase/firebase.go

// Package mock_firebase is a generated GoMock package.
package mock_firebase

import (
	context "context"
	reflect "reflect"

	auth "firebase.google.com/go/v4/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockFirebaseClientInterface is a mock of FirebaseClientInterface interface.
type MockFirebaseClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseClientInterfaceMockRecorder
}

// MockFirebaseClientInterfaceMockRecorder is the mock recorder for MockFirebaseClientInterface.
type MockFirebaseClientInterfaceMockRecorder struct {
	mock *MockFirebaseClientInterface
}

// NewMockFirebaseClientInterface creates a new mock instance.
func NewMockFirebaseClientInterface(ctrl *gomock.Controller) *MockFirebaseClientInterface {
	mock := &MockFirebaseClientInterface{ctrl: ctrl}
	mock.recorder = &MockFirebaseClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseClientInterface) EXPECT() *MockFirebaseClientInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockFirebaseClientInterface) CreateUser(ctx context.Context, user *auth.UserToCreate) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockFirebaseClientInterfaceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockFirebaseClientInterface)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockFirebaseClientInterface) DeleteUser(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockFirebaseClientInterfaceMockRecorder) DeleteUser(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockFirebaseClientInterface)(nil).DeleteUser), ctx, uid)
}

// GetUser mocks base method.
func (m *MockFirebaseClientInterface) GetUser(ctx context.Context, uid string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, uid)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockFirebaseClientInterfaceMockRecorder) GetUser(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockFirebaseClientInterface)(nil).GetUser), ctx, uid)
}

// VerifyIDToken mocks base method.
func (m *MockFirebaseClientInterface) VerifyIDToken(ctx context.Context, idToken string) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, idToken)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockFirebaseClientInterfaceMockRecorder) VerifyIDToken(ctx, idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockFirebaseClientInterface)(nil).VerifyIDToken), ctx, idToken)
}

// Mock SignInResponse for testing purposes
type SignInResponse struct {
	IDToken      string `json:"idToken"`
	RefreshToken string `json:"refreshToken"`
	ExpiresIn    string `json:"expiresIn"`
	LocalID      string `json:"localId"`
	Email        string `json:"email"`
}