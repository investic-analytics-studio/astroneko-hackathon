// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/referral_code/repository.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	referral_code "astroneko-backend/internal/core/domain/referral_code"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// ReferralCodeRepositoryInterface is a mock of RepositoryInterface interface.
type ReferralCodeRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *ReferralCodeRepositoryInterfaceMockRecorder
}

// ReferralCodeRepositoryInterfaceMockRecorder is the mock recorder for ReferralCodeRepositoryInterface.
type ReferralCodeRepositoryInterfaceMockRecorder struct {
	mock *ReferralCodeRepositoryInterface
}

// NewReferralCodeRepositoryInterface creates a new mock instance.
func NewReferralCodeRepositoryInterface(ctrl *gomock.Controller) *ReferralCodeRepositoryInterface {
	mock := &ReferralCodeRepositoryInterface{ctrl: ctrl}
	mock.recorder = &ReferralCodeRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ReferralCodeRepositoryInterface) EXPECT() *ReferralCodeRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ReferralCodeRepositoryInterface) Create(ctx context.Context, referralCode *referral_code.ReferralCode) (*referral_code.ReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, referralCode)
	ret0, _ := ret[0].(*referral_code.ReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) Create(ctx, referralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).Create), ctx, referralCode)
}

// CreateReferralLog mocks base method.
func (m *ReferralCodeRepositoryInterface) CreateReferralLog(ctx context.Context, referralLog *referral_code.ReferralLog) (*referral_code.ReferralLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferralLog", ctx, referralLog)
	ret0, _ := ret[0].(*referral_code.ReferralLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReferralLog indicates an expected call of CreateReferralLog.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) CreateReferralLog(ctx, referralLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferralLog", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).CreateReferralLog), ctx, referralLog)
}

// CreateUserReferralCode mocks base method.
func (m *ReferralCodeRepositoryInterface) CreateUserReferralCode(ctx context.Context, userReferralCode *referral_code.UserReferralCode) (*referral_code.UserReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserReferralCode", ctx, userReferralCode)
	ret0, _ := ret[0].(*referral_code.UserReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserReferralCode indicates an expected call of CreateUserReferralCode.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) CreateUserReferralCode(ctx, userReferralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserReferralCode", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).CreateUserReferralCode), ctx, userReferralCode)
}

// Delete mocks base method.
func (m *ReferralCodeRepositoryInterface) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *ReferralCodeRepositoryInterface) GetByID(ctx context.Context, id string) (*referral_code.ReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*referral_code.ReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).GetByID), ctx, id)
}

// GetByReferralCode mocks base method.
func (m *ReferralCodeRepositoryInterface) GetByReferralCode(ctx context.Context, code string) (*referral_code.ReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReferralCode", ctx, code)
	ret0, _ := ret[0].(*referral_code.ReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReferralCode indicates an expected call of GetByReferralCode.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) GetByReferralCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReferralCode", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).GetByReferralCode), ctx, code)
}

// GetReferralCodeUsageCount mocks base method.
func (m *ReferralCodeRepositoryInterface) GetReferralCodeUsageCount(ctx context.Context, referralCode string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralCodeUsageCount", ctx, referralCode)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralCodeUsageCount indicates an expected call of GetReferralCodeUsageCount.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) GetReferralCodeUsageCount(ctx, referralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralCodeUsageCount", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).GetReferralCodeUsageCount), ctx, referralCode)
}

// GetUserReferralCodeByCode mocks base method.
func (m *ReferralCodeRepositoryInterface) GetUserReferralCodeByCode(ctx context.Context, code string) (*referral_code.UserReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReferralCodeByCode", ctx, code)
	ret0, _ := ret[0].(*referral_code.UserReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReferralCodeByCode indicates an expected call of GetUserReferralCodeByCode.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) GetUserReferralCodeByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReferralCodeByCode", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).GetUserReferralCodeByCode), ctx, code)
}

// GetUserReferralCodesByUserID mocks base method.
func (m *ReferralCodeRepositoryInterface) GetUserReferralCodesByUserID(ctx context.Context, userID uuid.UUID) ([]*referral_code.UserReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReferralCodesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*referral_code.UserReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReferralCodesByUserID indicates an expected call of GetUserReferralCodesByUserID.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) GetUserReferralCodesByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReferralCodesByUserID", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).GetUserReferralCodesByUserID), ctx, userID)
}

// IsValidReferralCode mocks base method.
func (m *ReferralCodeRepositoryInterface) IsValidReferralCode(ctx context.Context, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidReferralCode", ctx, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidReferralCode indicates an expected call of IsValidReferralCode.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) IsValidReferralCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidReferralCode", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).IsValidReferralCode), ctx, code)
}

// IsValidUserReferralCode mocks base method.
func (m *ReferralCodeRepositoryInterface) IsValidUserReferralCode(ctx context.Context, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidUserReferralCode", ctx, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidUserReferralCode indicates an expected call of IsValidUserReferralCode.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) IsValidUserReferralCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidUserReferralCode", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).IsValidUserReferralCode), ctx, code)
}

// List mocks base method.
func (m *ReferralCodeRepositoryInterface) List(ctx context.Context, limit, offset int) ([]*referral_code.ReferralCode, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*referral_code.ReferralCode)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *ReferralCodeRepositoryInterface) Update(ctx context.Context, referralCode *referral_code.ReferralCode) (*referral_code.ReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, referralCode)
	ret0, _ := ret[0].(*referral_code.ReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) Update(ctx, referralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).Update), ctx, referralCode)
}

// UpdateUserReferralCode mocks base method.
func (m *ReferralCodeRepositoryInterface) UpdateUserReferralCode(ctx context.Context, userReferralCode *referral_code.UserReferralCode) (*referral_code.UserReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserReferralCode", ctx, userReferralCode)
	ret0, _ := ret[0].(*referral_code.UserReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserReferralCode indicates an expected call of UpdateUserReferralCode.
func (mr *ReferralCodeRepositoryInterfaceMockRecorder) UpdateUserReferralCode(ctx, userReferralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserReferralCode", reflect.TypeOf((*ReferralCodeRepositoryInterface)(nil).UpdateUserReferralCode), ctx, userReferralCode)
}
