// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/crm_user/repository.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	"context"
	"reflect"

	"astroneko-backend/internal/core/domain/crm_user"
	gomock "github.com/golang/mock/gomock"
)

// MockCRMUserRepositoryInterface is a mock of RepositoryInterface interface.
type MockCRMUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCRMUserRepositoryInterfaceMockRecorder
}

// MockCRMUserRepositoryInterfaceMockRecorder is the mock recorder for MockCRMUserRepositoryInterface.
type MockCRMUserRepositoryInterfaceMockRecorder struct {
	mock *MockCRMUserRepositoryInterface
}

// NewMockCRMUserRepositoryInterface creates a new mock instance.
func NewMockCRMUserRepositoryInterface(ctrl *gomock.Controller) *MockCRMUserRepositoryInterface {
	mock := &MockCRMUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCRMUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCRMUserRepositoryInterface) EXPECT() *MockCRMUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCRMUserRepositoryInterface) Create(ctx context.Context, user *crm_user.CRMUser) (*crm_user.CRMUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*crm_user.CRMUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCRMUserRepositoryInterfaceMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCRMUserRepositoryInterface)(nil).Create), ctx, user)
}

// GetByID mocks base method.
func (m *MockCRMUserRepositoryInterface) GetByID(ctx context.Context, id string) (*crm_user.CRMUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*crm_user.CRMUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCRMUserRepositoryInterfaceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCRMUserRepositoryInterface)(nil).GetByID), ctx, id)
}

// GetByUsername mocks base method.
func (m *MockCRMUserRepositoryInterface) GetByUsername(ctx context.Context, username string) (*crm_user.CRMUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*crm_user.CRMUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockCRMUserRepositoryInterfaceMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockCRMUserRepositoryInterface)(nil).GetByUsername), ctx, username)
}

// Update mocks base method.
func (m *MockCRMUserRepositoryInterface) Update(ctx context.Context, user *crm_user.CRMUser) (*crm_user.CRMUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(*crm_user.CRMUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCRMUserRepositoryInterfaceMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCRMUserRepositoryInterface)(nil).Update), ctx, user)
}

// Delete mocks base method.
func (m *MockCRMUserRepositoryInterface) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCRMUserRepositoryInterfaceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCRMUserRepositoryInterface)(nil).Delete), ctx, id)
}