// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/waiting_list/repository.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	"context"
	"reflect"

	"astroneko-backend/internal/core/domain/waiting_list"
	gomock "github.com/golang/mock/gomock"
)

// MockWaitingListRepositoryInterface is a mock of RepositoryInterface interface.
type MockWaitingListRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWaitingListRepositoryInterfaceMockRecorder
}

// MockWaitingListRepositoryInterfaceMockRecorder is the mock recorder for MockWaitingListRepositoryInterface.
type MockWaitingListRepositoryInterfaceMockRecorder struct {
	mock *MockWaitingListRepositoryInterface
}

// NewMockWaitingListRepositoryInterface creates a new mock instance.
func NewMockWaitingListRepositoryInterface(ctrl *gomock.Controller) *MockWaitingListRepositoryInterface {
	mock := &MockWaitingListRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWaitingListRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaitingListRepositoryInterface) EXPECT() *MockWaitingListRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWaitingListRepositoryInterface) Create(ctx context.Context, waitingListUser *waiting_list.WaitingListUser) (*waiting_list.WaitingListUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, waitingListUser)
	ret0, _ := ret[0].(*waiting_list.WaitingListUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWaitingListRepositoryInterfaceMockRecorder) Create(ctx, waitingListUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWaitingListRepositoryInterface)(nil).Create), ctx, waitingListUser)
}

// Delete mocks base method.
func (m *MockWaitingListRepositoryInterface) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWaitingListRepositoryInterfaceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWaitingListRepositoryInterface)(nil).Delete), ctx, id)
}

// GetByEmail mocks base method.
func (m *MockWaitingListRepositoryInterface) GetByEmail(ctx context.Context, email string) (*waiting_list.WaitingListUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*waiting_list.WaitingListUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockWaitingListRepositoryInterfaceMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockWaitingListRepositoryInterface)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockWaitingListRepositoryInterface) GetByID(ctx context.Context, id string) (*waiting_list.WaitingListUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*waiting_list.WaitingListUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockWaitingListRepositoryInterfaceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockWaitingListRepositoryInterface)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockWaitingListRepositoryInterface) List(ctx context.Context, limit, offset int) ([]*waiting_list.WaitingListUser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]*waiting_list.WaitingListUser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockWaitingListRepositoryInterfaceMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWaitingListRepositoryInterface)(nil).List), ctx, limit, offset)
}