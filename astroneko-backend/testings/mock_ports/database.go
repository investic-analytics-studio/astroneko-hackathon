// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/database.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	"context"
	"reflect"

	"astroneko-backend/internal/core/ports"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseInterface is a mock of DatabaseInterface interface.
type MockDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInterfaceMockRecorder
}

// MockDatabaseInterfaceMockRecorder is the mock recorder for MockDatabaseInterface.
type MockDatabaseInterfaceMockRecorder struct {
	mock *MockDatabaseInterface
}

// NewMockDatabaseInterface creates a new mock instance.
func NewMockDatabaseInterface(ctrl *gomock.Controller) *MockDatabaseInterface {
	mock := &MockDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInterface) EXPECT() *MockDatabaseInterfaceMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDatabaseInterface) Begin() ports.DatabaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockDatabaseInterfaceMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDatabaseInterface)(nil).Begin))
}

// Commit mocks base method.
func (m *MockDatabaseInterface) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDatabaseInterfaceMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDatabaseInterface)(nil).Commit))
}

// Count mocks base method.
func (m *MockDatabaseInterface) Count(count *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockDatabaseInterfaceMockRecorder) Count(count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDatabaseInterface)(nil).Count), count)
}

// Create mocks base method.
func (m *MockDatabaseInterface) Create(value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDatabaseInterfaceMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDatabaseInterface)(nil).Create), value)
}

// Delete mocks base method.
func (m *MockDatabaseInterface) Delete(value interface{}, conds ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabaseInterfaceMockRecorder) Delete(value interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{value}
	varargs = append(varargs, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabaseInterface)(nil).Delete), varargs...)
}

// Exec mocks base method.
func (m *MockDatabaseInterface) Exec(sql string, values ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockDatabaseInterfaceMockRecorder) Exec(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{sql}
	varargs = append(varargs, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabaseInterface)(nil).Exec), varargs...)
}

// Find mocks base method.
func (m *MockDatabaseInterface) Find(dest interface{}, conds ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockDatabaseInterfaceMockRecorder) Find(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{dest}
	varargs = append(varargs, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDatabaseInterface)(nil).Find), varargs...)
}

// First mocks base method.
func (m *MockDatabaseInterface) First(dest interface{}, conds ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockDatabaseInterfaceMockRecorder) First(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{dest}
	varargs = append(varargs, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockDatabaseInterface)(nil).First), varargs...)
}

// Limit mocks base method.
func (m *MockDatabaseInterface) Limit(limit int) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockDatabaseInterfaceMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockDatabaseInterface)(nil).Limit), limit)
}

// Model mocks base method.
func (m *MockDatabaseInterface) Model(value interface{}) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", value)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockDatabaseInterfaceMockRecorder) Model(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockDatabaseInterface)(nil).Model), value)
}

// Omit mocks base method.
func (m *MockDatabaseInterface) Omit(columns ...string) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockDatabaseInterfaceMockRecorder) Omit(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockDatabaseInterface)(nil).Omit), columns...)
}

// Offset mocks base method.
func (m *MockDatabaseInterface) Offset(offset int) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockDatabaseInterfaceMockRecorder) Offset(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockDatabaseInterface)(nil).Offset), offset)
}

// Order mocks base method.
func (m *MockDatabaseInterface) Order(value interface{}) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", value)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockDatabaseInterfaceMockRecorder) Order(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockDatabaseInterface)(nil).Order), value)
}

// Raw mocks base method.
func (m *MockDatabaseInterface) Raw(sql string, values ...interface{}) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockDatabaseInterfaceMockRecorder) Raw(sql interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{sql}
	varargs = append(varargs, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockDatabaseInterface)(nil).Raw), varargs...)
}

// Rollback mocks base method.
func (m *MockDatabaseInterface) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockDatabaseInterfaceMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDatabaseInterface)(nil).Rollback))
}

// Save mocks base method.
func (m *MockDatabaseInterface) Save(value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDatabaseInterfaceMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDatabaseInterface)(nil).Save), value)
}

// Scan mocks base method.
func (m *MockDatabaseInterface) Scan(dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockDatabaseInterfaceMockRecorder) Scan(dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockDatabaseInterface)(nil).Scan), dest)
}

// Select mocks base method.
func (m *MockDatabaseInterface) Select(query interface{}, args ...interface{}) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDatabaseInterfaceMockRecorder) Select(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{query}
	varargs = append(varargs, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDatabaseInterface)(nil).Select), varargs...)
}

// Update mocks base method.
func (m *MockDatabaseInterface) Update(column string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", column, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDatabaseInterfaceMockRecorder) Update(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabaseInterface)(nil).Update), column, value)
}

// Updates mocks base method.
func (m *MockDatabaseInterface) Updates(values interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockDatabaseInterfaceMockRecorder) Updates(values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockDatabaseInterface)(nil).Updates), values)
}

// Where mocks base method.
func (m *MockDatabaseInterface) Where(query interface{}, args ...interface{}) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockDatabaseInterfaceMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := []interface{}{query}
	varargs = append(varargs, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockDatabaseInterface)(nil).Where), varargs...)
}

// WithContext mocks base method.
func (m *MockDatabaseInterface) WithContext(ctx context.Context) ports.DatabaseInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(ports.DatabaseInterface)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockDatabaseInterfaceMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockDatabaseInterface)(nil).WithContext), ctx)
}