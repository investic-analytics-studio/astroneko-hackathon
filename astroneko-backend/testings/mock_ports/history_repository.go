// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/history/repository.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	history "astroneko-backend/internal/core/domain/history"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// HistoryRepositoryInterface is a mock of RepositoryInterface interface.
type HistoryRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *HistoryRepositoryInterfaceMockRecorder
}

// HistoryRepositoryInterfaceMockRecorder is the mock recorder for HistoryRepositoryInterface.
type HistoryRepositoryInterfaceMockRecorder struct {
	mock *HistoryRepositoryInterface
}

// NewHistoryRepositoryInterface creates a new mock instance.
func NewHistoryRepositoryInterface(ctrl *gomock.Controller) *HistoryRepositoryInterface {
	mock := &HistoryRepositoryInterface{ctrl: ctrl}
	mock.recorder = &HistoryRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HistoryRepositoryInterface) EXPECT() *HistoryRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *HistoryRepositoryInterface) DeleteSession(ctx context.Context, sessionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *HistoryRepositoryInterfaceMockRecorder) DeleteSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*HistoryRepositoryInterface)(nil).DeleteSession), ctx, sessionID)
}

// GetMessagesBySessionID mocks base method.
func (m *HistoryRepositoryInterface) GetMessagesBySessionID(ctx context.Context, sessionID uuid.UUID, sortOrder string) ([]history.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesBySessionID", ctx, sessionID, sortOrder)
	ret0, _ := ret[0].([]history.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesBySessionID indicates an expected call of GetMessagesBySessionID.
func (mr *HistoryRepositoryInterfaceMockRecorder) GetMessagesBySessionID(ctx, sessionID, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesBySessionID", reflect.TypeOf((*HistoryRepositoryInterface)(nil).GetMessagesBySessionID), ctx, sessionID, sortOrder)
}

// GetSessionByID mocks base method.
func (m *HistoryRepositoryInterface) GetSessionByID(ctx context.Context, sessionID uuid.UUID) (*history.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", ctx, sessionID)
	ret0, _ := ret[0].(*history.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *HistoryRepositoryInterfaceMockRecorder) GetSessionByID(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*HistoryRepositoryInterface)(nil).GetSessionByID), ctx, sessionID)
}

// GetSessionsByUserID mocks base method.
func (m *HistoryRepositoryInterface) GetSessionsByUserID(ctx context.Context, userID uuid.UUID, sortBy, sortOrder, searchQuery string) ([]history.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsByUserID", ctx, userID, sortBy, sortOrder, searchQuery)
	ret0, _ := ret[0].([]history.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsByUserID indicates an expected call of GetSessionsByUserID.
func (mr *HistoryRepositoryInterfaceMockRecorder) GetSessionsByUserID(ctx, userID, sortBy, sortOrder, searchQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsByUserID", reflect.TypeOf((*HistoryRepositoryInterface)(nil).GetSessionsByUserID), ctx, userID, sortBy, sortOrder, searchQuery)
}

// ValidateSessionOwnership mocks base method.
func (m *HistoryRepositoryInterface) ValidateSessionOwnership(ctx context.Context, sessionID, userID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSessionOwnership", ctx, sessionID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSessionOwnership indicates an expected call of ValidateSessionOwnership.
func (mr *HistoryRepositoryInterfaceMockRecorder) ValidateSessionOwnership(ctx, sessionID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSessionOwnership", reflect.TypeOf((*HistoryRepositoryInterface)(nil).ValidateSessionOwnership), ctx, sessionID, userID)
}
