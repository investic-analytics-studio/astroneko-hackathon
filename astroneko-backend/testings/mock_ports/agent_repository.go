// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/agent/repository.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	"context"
	"reflect"

	"astroneko-backend/internal/core/domain/agent"
	gomock "github.com/golang/mock/gomock"
)

// MockAgentRepositoryInterface is a mock of RepositoryInterface interface.
type MockAgentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAgentRepositoryInterfaceMockRecorder
}

// MockAgentRepositoryInterfaceMockRecorder is the mock recorder for MockAgentRepositoryInterface.
type MockAgentRepositoryInterfaceMockRecorder struct {
	mock *MockAgentRepositoryInterface
}

// NewMockAgentRepositoryInterface creates a new mock instance.
func NewMockAgentRepositoryInterface(ctrl *gomock.Controller) *MockAgentRepositoryInterface {
	mock := &MockAgentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAgentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentRepositoryInterface) EXPECT() *MockAgentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// ClearState mocks base method.
func (m *MockAgentRepositoryInterface) ClearState(ctx context.Context, request agent.ClearStateRequest) (*agent.ClearStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearState", ctx, request)
	ret0, _ := ret[0].(*agent.ClearStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearState indicates an expected call of ClearState.
func (mr *MockAgentRepositoryInterfaceMockRecorder) ClearState(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearState", reflect.TypeOf((*MockAgentRepositoryInterface)(nil).ClearState), ctx, request)
}

// Reply mocks base method.
func (m *MockAgentRepositoryInterface) Reply(ctx context.Context, request agent.ReplyRequest) (*agent.ReplyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", ctx, request)
	ret0, _ := ret[0].(*agent.ReplyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reply indicates an expected call of Reply.
func (mr *MockAgentRepositoryInterfaceMockRecorder) Reply(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockAgentRepositoryInterface)(nil).Reply), ctx, request)
}